#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/resource.h>
#include "mysql.h"
#define LENGTH 100
#define FILE_PATH "/var/www/kernel/mkoj_main.c"

char query[LENGTH];
int query_db(){
	MYSQL mysql;
	mysql_init(&mysql);
	mysql_real_connect(&mysql,"localhost","root","1024","oj",0,NULL,0);
	int flag=mysql_real_query(&mysql,query,(unsigned int) strlen(query));
        if(flag){
                printf("[%s] query failed! \n",query);
                return 0;
        }else{
		printf("[%s] query success! \n",query);
		return 1;
	}
	mysql_close(&mysql);
}
void update_compile_db(int status,int id){
	char sstatus[10],sid[10];
	sprintf(sid,"%d",id);
	sprintf(sstatus,"%d",status);
//	strcpy(query,strcat(strcat(strcat("update code set c_status=",sstatus)," where c_ID="),sid));
//	query=strcat(strcat(strcat(strcat(strcat(strcat("update ",table),"set c_code="),val),"where "),dcol),dval);
	strcpy(query,"update code set c_status=");
	strcat(query,sstatus);
	strcat(query," where c_ID=");
	strcat(query,sid);
	query_db();
}
void update_execute_db(int status,int id,int memory,long time){
	char sstatus[10],sid[10],smemory[10],stime[10];
	sprintf(sid,"%d",id);
	sprintf(sstatus,"%d",status);
	sprintf(smemory,"%d",memory);
	sprintf(stime,"%ld",time);
	strcpy(query,"update code set c_status=");
	strcat(query,sstatus);
	strcat(query,", c_memory=");
	strcat(query,smemory);
	strcat(query,", c_time=");
	strcat(query,stime);
	strcat(query," where c_ID=");
	strcat(query,sid);
	query_db();
}
void create_code_file(char code[LENGTH]){
	FILE *fd;
	char str[LENGTH];
	fd = fopen(FILE_PATH, "w+"); 
	/* 创建并打开文件 */
	if (fd){
		fputs(code, fd); 
		/* 写入代码 */
		fclose(fd);
	}
}
int compile(){
//	execl("/bin/sh","sh","-c",compile_command,NULL);
	FILE *fp;
	char buffer[80];
	fp=popen("gcc -o /var/www/kernel/mkoj_main /var/www/kernel/mkoj_main.c","r");
	while(fgets(buffer, sizeof buffer, fp))
	{
		printf("compile ->  %s", buffer);
	}
	pclose(fp);
	if(buffer) return 1;
	else return 0;
}

void split_string( char **arr, char *str, const char *del)//字符分割函数简单定义和实现
{
	char *s =NULL; 

	s=strtok(str,del);
	while(s != NULL)
	{
		*arr++ = s;
		s = strtok(NULL,del);
	}
}
int tim_subtract(struct timeval *result, struct timeval *x, struct timeval *y)
{
	int nsec;
	if ( x->tv_sec > y->tv_sec )
	return   -1;
	if ((x->tv_sec==y->tv_sec) && (x->tv_usec>y->tv_usec))
	return   -1;
	result->tv_sec = ( y->tv_sec-x->tv_sec );
	result->tv_usec = ( y->tv_usec-x->tv_usec );
	if (result->tv_usec<0)
	{
	result->tv_sec--;
	result->tv_usec+=1000000;
	}
	return   0;
}
int execute(int id,int problem_id){
	struct   timeval   start,stop,diff;
	gettimeofday(&start,0);
	char buf[128];
	FILE *pp;
/*	char data_path[128];
	strcpy(data_path,"./mkoj_main");
	strcat(data_path,"</var/www/data/8/1.in\0");
	if((pp = popen(data_path, "r")) == NULL )
	{
		printf("popen() error!\n");
		exit(1);
	}

	
	printf("mkoj_main path：%s\n",data_path);*/

	if((pp = popen("./mkoj_main", "w")) == NULL )
	{
		printf("popen() error!\n");
		sleep(2);
		exit(1);
	}
        //get the process id of mkoj_main
        FILE *process;
        char probuff[128];
        process=popen("pgrep mkoj_main","r");
        while(fgets(probuff, sizeof probuff, process))
        {
                printf("进程id：%s\n", probuff);
        }

	pclose(process);
//	fgets(probuff,sizeof probuff,process);
//	printf("进程id：%s \n",probuff);
	FILE *procinfo;
        char m_str[LENGTH];
	char proc_m_path[1024];
	char proc_t_path[1024];
	char new_probuff[1024];
	char new_probuff2[1024];
	char p1[]="/proc/\0";
	char p11[]="/proc/\0";
	char p2[]="/statm\0";
	char p33[]="/stat\0";
	int i;
	for(i=0;i<(unsigned int)sizeof(probuff);i++){
		if(probuff[i]=='\n') continue;
		new_probuff[i]=probuff[i];
	}
	strcat(new_probuff,"\0");
	sprintf(proc_m_path, "%.*s%.*s%.*s",(unsigned int)sizeof(p1), p1, (unsigned int)sizeof(new_probuff),new_probuff,(unsigned int)sizeof(p2), p2);
	
	printf("memory path：%s\n",proc_m_path);
        procinfo = fopen(proc_m_path, "w+");
        /* 打开文件 */
        /*if (procinfo){
                fputs(m_str, procinfo);
                // 获取内存数据 
                fclose(procinfo);
        }*/
/*
	while(fgets(buf, sizeof buf, procinfo))
	{
		printf("内存数据：%s\n",buf);
	}
*/
	fgets(buf, sizeof buf, procinfo);
	printf("内存数据：%s\n",buf);

	char *myArray[4];

	memset(myArray, 0x0, sizeof(myArray));
	split_string(myArray, buf, " ");
	printf("use memory：%s\n",myArray[0]);
//get use time
	
	memset(proc_t_path, 0x0, sizeof(proc_t_path));
	sprintf(proc_t_path, "%.*s%.*s",(unsigned int)sizeof(p11), p11, (unsigned int)sizeof(new_probuff),new_probuff);
/*	strcpy(proc_t_path,p1);
	strcat(proc_t_path,new_probuff);
	strcat(proc_t_path,p3);
*/
	strcat(proc_t_path,"/stat");
	printf("time path：%s\n",proc_t_path);
        procinfo = fopen(proc_t_path, "w+");
/*
	fgets(buf, sizeof buf, procinfo);
	printf("stat 数据：%s\n",buf);
	
	while(fgets(buf, sizeof buf, procinfo))
	{
		printf("stat 数据：%s\n",buf);
	}*/
	fgets(buf, sizeof buf, procinfo);
	printf("stat first line：%s\n",buf);
	char *timeArray[100];

	memset(timeArray, 0x0, sizeof(timeArray));
	split_string(timeArray, buf, " ");
	printf("time memory process：%s\n",timeArray[13]);
	printf("time memory system：%s\n",timeArray[14]);
//input data  
	fputs("3 2>/var/www/data/1.out",pp);
//	freopen("/var/www/data/8/1.in","r",stdin);
	while(fgets(buf, sizeof buf, pp))
	{
		printf("输出结果：%s\n", buf);
	}
	gettimeofday(&stop,0);
	tim_subtract(&diff,&start,&stop);
	printf("总计用时:%ld毫秒\n",diff.tv_usec);
	struct rusage usage;
	getrusage(RUSAGE_CHILDREN, &usage);
	printf("time:%ld毫秒\n",usage.ru_utime.tv_usec);
	pclose(pp);
	update_execute_db(1,id,atol(myArray[0]),diff.tv_usec);
	return 1;
}
/*
void init_daemon(void){
	pid_t pid;
	int i;
	pid = fork();
	if(pid > 0){ //终止父进程
		exit(0);
	}else if(pid < 0 ){
		perror("创建子进程失败\n");
		exit(1);
	}else if(pid == 0){
		setsid();//子进程中创建新会话
		chdir("/tmp");//改变工作目录到tmp
		umask(0); //重设文件掩码
		for(i=0; i<NOFILE;++i){//关闭文件描述符
			close(i);
		}
		return ;
	}
}
int execute2(){
	int flag;
	pid_t pid;
	int status;
	char buf[128];
	FILE *procinfo;
	struct rusage usage;
	if((pid = fork())==0) {
		printf("in child process 1......\n");  
		//flag = execvp("./hello", NULL);   
		//envp变量的用
		freopen("/var/www/data/8/1.in","r",stdin);
		flag = execvp("./mkoj_main", NULL);
		if(flag == -1)printf("exec error!\n");
		fclose(stdin);
//		getrusage(RUSAGE_CHILDREN, &usage);
//		printf("time:%ld毫秒\n",usage.ru_utime.tv_usec);
//		wait4(pid_t pid, int *status, int options, struct rusage *rusage);

	}
	wait4(pid,&status,WUNTRACED,&usage);
	char proc_m_path[1024];
//	strcpy(proc_m_path,"/proc/statm");
	sprintf(proc_m_path, "/proc/%d/statm",(unsigned int)sizeof(pid), pid);
	printf("memory path：%s\n",proc_m_path);
        procinfo = fopen(proc_m_path, "w+");
	fgets(buf, sizeof buf, procinfo);
	printf("内存数据：%s\n",buf);
	//printf("The son's pid:%d, status:%d, The memory is:%ld\n", pid, WIFEXITED(status),usage.ru_nswap);
	printf("The son's pid:%d, status:%d, The user time is:%ld\n", pid, WIFEXITED(status),usage.ru_utime.tv_usec);
}*/
int handler(){
	MYSQL mysql;
	MYSQL_RES *res;
	MYSQL_ROW row;
	char *query;
	int flag,t;
	mysql_init(&mysql);
	if(!mysql_real_connect(&mysql,"localhost","root","1024","oj",0,NULL,0)){
		printf("Failed to connect to MySQL! \n");
		return 0;
	}else printf("Connected MySQL successfully! \n");
	query="select * from code where `c_status`=0";
	flag=mysql_real_query(&mysql,query,(unsigned int) strlen(query));
	if(flag){
		printf("query failed! \n");
		return 0;
	}else printf("[%s] made ... \n",query);
	res=mysql_store_result(&mysql);
	if(row=mysql_fetch_row(res)){
	//	while(row=mysql_fetch_row(res)){
		//	for(t=0;t<mysql_num_fields(res);t++){
	//			printf("%s",row[0]);	
		//	}
	//		printf("\n");
	//	}
		mysql_close(&mysql);
		create_code_file(row[3]);
		if(compile()==0) printf("compile error! \n");
		else printf("compile right! \n");
		update_compile_db(1,atol(row[0]));
		execute(atol(row[0]),atol(row[2]));
	}
	return 0;
}
void main(void){
	while(1){
		handler();
		sleep(5);
	}
} 
void maine(){
	execute(4,8);
	//execute2();
}
